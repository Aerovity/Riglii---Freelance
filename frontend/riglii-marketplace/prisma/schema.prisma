// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  clerkId      String   @unique
  email        String   @unique
  isFreelancer Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  profile FreelancerProfile?

  @@map("users")
}

model FreelancerProfile {
  id                   String    @id @default(uuid())
  userId               String    @unique
  firstName            String?
  lastName             String?
  displayName          String?
  description          String?
  occupation           String?
  customOccupation     String?
  profilePictureUrl    String?
  onboardingCompletedAt DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  languages    FreelancerLanguage[]
  categories   FreelancerCategory[]
  skills       FreelancerSkill[]
  certificates FreelancerCertificate[]
  education    FreelancerEducation?
  documents    FreelancerDocument[]
  paymentInfo  FreelancerPaymentInfo?

  @@index([userId])
  @@map("freelancer_profiles")
}

model FreelancerLanguage {
  id             String   @id @default(uuid())
  freelancerId   String
  language       String
  proficiencyLevel String
  createdAt      DateTime @default(now())

  // Relations
  profile FreelancerProfile @relation(fields: [freelancerId], references: [id], onDelete: Cascade)

  @@index([freelancerId])
  @@map("freelancer_languages")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())

  // Relations
  freelancers FreelancerCategory[]

  @@map("categories")
}

model FreelancerCategory {
  freelancerId String
  categoryId   String
  createdAt    DateTime @default(now())

  // Relations
  profile  FreelancerProfile @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  category Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([freelancerId, categoryId])
  @@index([freelancerId])
  @@index([categoryId])
  @@map("freelancer_categories")
}

model FreelancerSkill {
  id           String   @id @default(uuid())
  freelancerId String
  skill        String
  level        String
  createdAt    DateTime @default(now())

  // Relations
  profile FreelancerProfile @relation(fields: [freelancerId], references: [id], onDelete: Cascade)

  @@index([freelancerId])
  @@map("freelancer_skills")
}

model FreelancerCertificate {
  id           String   @id @default(uuid())
  freelancerId String
  name         String
  issuer       String
  year         String?
  createdAt    DateTime @default(now())

  // Relations
  profile FreelancerProfile @relation(fields: [freelancerId], references: [id], onDelete: Cascade)

  @@index([freelancerId])
  @@map("freelancer_certificates")
}

model FreelancerEducation {
  id           String   @id @default(uuid())
  freelancerId String   @unique
  country      String?
  university   String?
  title        String?
  major        String?
  year         String?
  createdAt    DateTime @default(now())

  // Relations
  profile FreelancerProfile @relation(fields: [freelancerId], references: [id], onDelete: Cascade)

  @@map("freelancer_education")
}

model FreelancerDocument {
  id              String    @id @default(uuid())
  freelancerId    String
  documentType    String
  documentUrl     String
  verified        Boolean   @default(false)
  verificationDate DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  profile FreelancerProfile @relation(fields: [freelancerId], references: [id], onDelete: Cascade)

  @@index([freelancerId])
  @@map("freelancer_documents")
}

model FreelancerPaymentInfo {
  id                String    @id @default(uuid())
  freelancerId      String    @unique
  paymentType       String    @default("ccp")
  accountNumber     String
  accountHolderName String
  verified          Boolean   @default(false)
  verificationDate  DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  profile FreelancerProfile @relation(fields: [freelancerId], references: [id], onDelete: Cascade)

  @@map("freelancer_payment_info")
}